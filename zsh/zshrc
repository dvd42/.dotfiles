export TERM="tmux-256color"
eval "$(/opt/homebrew/bin/brew shellenv)"
export PATH=$HOME/bin:/usr/local/bin:$PATH
export PATH=$HOME/.local/bin:$PATH
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"

if [ "$TERM_PROGRAM" != "Apple_Terminal" ]; then
  eval "$(oh-my-posh init zsh --config '~/.dotfiles/zsh/pure.toml')"
fi

export VIRTUAL_ENV_DISABLE_PROMPT=1

ZINIT_HOME="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"
[ ! -d $ZINIT_HOME ] && mkdir -p "$(dirname $ZINIT_HOME)"
[ ! -d $ZINIT_HOME/.git ] && git clone https://github.com/zdharma-continuum/zinit.git "$ZINIT_HOME"
source "${ZINIT_HOME}/zinit.zsh"

# Plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab
zinit light softmoth/zsh-vim-mode

# # Add in snippets
zinit snippet OMZP::command-not-found
zinit snippet OMZP::tmux
zinit snippet OMZP::git

# # # Load completions
autoload -Uz compinit && compinit
zinit cdreplay -q 

# # Completion styling
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'
zstyle ':fzf-tab:*' fzf-bindings 'enter:accept'
zstyle ':fzf-tab:*' continuous-trigger '/'



set -o ignoreeof

bindkey -v
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward
bindkey '^r' history-incremental-search-backward

HISTSIZE=10000
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISDUP=erase

setopt appendhistory
setopt sharehistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups

# # Aliases
alias ll="ls -alFh --color"
alias ls="ls --color"
alias vim="nvim"
alias vi="nvim"
alias takeover="tmux detach -a"
alias python="python3"
alias pa="pyenv activate $1"
alias pd="pyenv deactivate"

# create new pyenv with dependencies
new_env() {
    local env_name=$1
    local req_file=$2
    local python_version

    # Check if a .python-version file exists in the current directory
    if [[ -f ".python-version" ]]; then
        python_version=$(cat .python-version)
    else
        echo "No .python-version file found. Enter a Python version or path to a .python-version file:"
        read python_version
        if [[ -f "$python_version" ]]; then
            python_version=$(cat "$python_version")
        fi
    fi

    if [[ -z "$python_version" ]]; then
        echo "Invalid Python version. Exiting..."
        return 1
    fi

    if [[ -z "$env_name" ]]; then
        echo "You must provide a name for the virtualenv."
        return 1
    fi

    pyenv virtualenv "$python_version" "$env_name"
    pyenv activate "$env_name"

    # Check if a requirements file path has been provided and file exists
    if [[ -n "$req_file" && -f "$req_file" ]]; then
        pip install -r "$req_file"
        pip install ipdb
    elif [[ -n "$req_file" ]]; then
        echo "Provided requirements file does not exist: $req_file"
    else
        echo "No requirements file provided. Setup complete without installing additional packages."
    fi
}


function whoops() {
    # Extract the last directory name from the current path
    local current_dir="${PWD##*/}"

    # Convert to uppercase and lowercase
    local env_upper="${current_dir:u}"
    local env_lower="${current_dir:l}"

    # Save the currently active pyenv environment
    local original_env=$(pyenv version-name 2>/dev/null)

    # Check if the pyenv environment exists
    if pyenv versions --bare | grep -qE "^(${env_lower}|${env_upper})$"; then
        echo "Activating environment: $current_dir"
        pyenv activate "$current_dir" 2>/dev/null || pyenv activate "${current_dir:l}" 2>/dev/null || pyenv activate "${current_dir:u}"
    else
        echo "Error: No pyenv environment found for $current_dir"
        return 1
    fi

    echo "Running pytest with coverage..."
    python -m pytest --cov=. .

    echo "Running mypy..."
    mypy .

    pyenv deactivate
    echo "Running pre-commit..."
    pre-commit run --all-files
    
    # Reactivate the original environment if it existed
    if [[ -n "$original_env" ]]; then
        pyenv activate "$original_env"
    fi

}

eval "$(pyenv init -)"
eval "$(pyenv virtualenv-init - | sed s/precmd/precwd/g)"
eval "$(zoxide init zsh --cmd cd)"
eval "$(fzf --zsh)"
eval "$(fnm env --use-on-cd)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/diego.velazquez/Downloads/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/diego.velazquez/Downloads/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/diego.velazquez/Downloads/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/diego.velazquez/Downloads/google-cloud-sdk/completion.zsh.inc'; fi
